parsed
Let false =
  CInt 0
In
  LetRec mod_ =
    Osub
      Var a
      Omul
        Odiv
          Var a
          Var b
        Var b
  In
    LetRec print_int_base =
      If
        Olt
          Var x
          CInt 10
      Then
        If
          Olt
            CInt 0
            Var x
        Then
          App 
            Var print_char
              Oadd
                Var x
                CInt 48
        Else
          ( 
           )
      Else
        Osemi2
          App 
            Var print_int_base
              Odiv
                Var x
                CInt 10
          App 
            Var print_char
              Oadd
                App 
                  Var mod_
                    Var x
                    CInt 10
                CInt 48
    In
      LetRec print_int =
        If
          Oeq
            Var x
            CInt 0
        Then
          App 
            Var print_char
              CInt 48
        Else
          If
            Olt
              Var x
              CInt 0
          Then
            Osemi2
              App 
                Var print_char
                  CInt 45
              App 
                Var print_int_base
                  Osub
                    CInt 0
                    Var x
          Else
            App 
              Var print_int_base
                Var x
      In
        LetRec read_int =
          LetRec f =
            Let n =
              App 
                Var read_char
                  ( 
                   )
            In
              If
                Ogt
                  Omul
                    Osub
                      Var n
                      CInt 47
                    Osub
                      CInt 58
                      Var n
                  CInt 0
              Then
                App 
                  Var f
                    Oadd
                      Omul
                        Var acc
                        CInt 10
                      Osub
                        Var n
                        CInt 48
              Else
                Var acc
          In
            Let c =
              App 
                Var read_char
                  ( 
                   )
            In
              If
                Oeq
                  Var c
                  CInt 45
              Then
                Ominus
                  App 
                    Var f
                      CInt 0
              Else
                If
                  Ogt
                    Omul
                      Osub
                        Var c
                        CInt 47
                      Osub
                        CInt 58
                        Var c
                    CInt 0
                Then
                  App 
                    Var f
                      Osub
                        Var c
                        CInt 48
                Else
                  App 
                    Var read_int
                      Var x
        In
          LetRec read_float =
            LetRec g =
              Let n =
                App 
                  Var read_char
                    ( 
                     )
              In
                If
                  Ogt
                    Omul
                      Osub
                        Var n
                        CInt 47
                      Osub
                        CInt 58
                        Var n
                    CInt 0
                Then
                  App 
                    Var g
                      Ofmul
                        Var b
                        CFloat 0.100000
                      Ofadd
                        Var acc
                        Ofmul
                          Var b
                          App 
                            Var float_of_int
                              Osub
                                Var n
                                CInt 48
                Else
                  Var acc
            In
              LetRec f =
                Let n =
                  App 
                    Var read_char
                      ( 
                       )
                In
                  If
                    Ogt
                      Omul
                        Osub
                          Var n
                          CInt 47
                        Osub
                          CInt 58
                          Var n
                      CInt 0
                  Then
                    App 
                      Var f
                        Ofadd
                          Ofmul
                            Var acc
                            CFloat 10.000000
                          App 
                            Var float_of_int
                              Osub
                                Var n
                                CInt 48
                  Else
                    App 
                      Var g
                        CFloat 0.100000
                        Var acc
              In
                Let c =
                  App 
                    Var read_char
                      ( 
                       )
                In
                  If
                    Oeq
                      Var c
                      CInt 45
                  Then
                    Ofsub
                      CFloat 0.000000
                      App 
                        Var f
                          CFloat 0.000000
                  Else
                    If
                      Ogt
                        Omul
                          Osub
                            Var c
                            CInt 47
                          Osub
                            CInt 58
                            Var c
                        CInt 0
                    Then
                      App 
                        Var f
                          App 
                            Var float_of_int
                              Osub
                                Var c
                                CInt 48
                    Else
                      App 
                        Var read_float
                          Var x
          In
            Osemi2
              App 
                Var print_int
                  CInt 314
              Osemi2
                App 
                  Var print_char
                    CInt 10
                Osemi2
                  App 
                    Var print_int
                      CInt 0
                  Osemi2
                    App 
                      Var print_char
                        CInt 10
                    Osemi2
                      App 
                        Var print_int
                          Ominus
                            CInt 1234
                      App 
                        Var print_char
                          CInt 10
typed
k-normalized
 :: @cls_2 .aka @t_4_mod_
@t_7_print_int_base : @t_4_mod_ :: @cls_3 .aka @t_7_print_int_base
@t_7_print_int_base :: @cls_4 .aka @t_9_print_int
@t_13_f :: @cls_6 .aka @t_13_f
@t_11_read_int :: @cls_5 .aka @t_11_read_int
@t_19_g :: @cls_8 .aka @t_19_g
@t_23_f : @t_19_g :: @cls_9 .aka @t_23_f
@t_17_read_float :: @cls_7 .aka @t_17_read_float
 :: @cls_1 .aka @t_1_@@main
@cls_2 : Func ()(@t_5 : int , @t_6 : int)[
Let @k_188 : int =
  Var @t_5 : int
In
  Let @k_189 : int =
    Let @k_190 : int =
      Let @k_192 : int =
        Var @t_5 : int
      In
        Let @k_193 : int =
          Var @t_6 : int
        In
          Odiv(@k_192 : int , @k_193 : int)
    In
      Let @k_191 : int =
        Var @t_6 : int
      In
        Omul(@k_190 : int , @k_191 : int)
  In
    Osub(@k_188 : int , @k_189 : int)
]
@cls_3 : Func (@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)(@t_8 : int)[
Let @k_163 : int =
  Let @k_186 : int =
    Var @t_8 : int
  In
    Let @k_187 : int =
      CInt 10
    In
      Olt(@k_186 : int , @k_187 : int)
In
  Let @k_164 : bool =
    CBool true
  In
    If @k_163 : int  =  @k_164 : bool Then
      Let @k_165 : int =
        Let @k_171 : int =
          CInt 0
        In
          Let @k_172 : int =
            Var @t_8 : int
          In
            Olt(@k_171 : int , @k_172 : int)
      In
        Let @k_166 : bool =
          CBool true
        In
          If @k_165 : int  =  @k_166 : bool Then
            Let @k_167 : int -> () =
              Var print_char : int -> ()
            In
              Let @k_168 : int =
                Let @k_169 : int =
                  Var @t_8 : int
                In
                  Let @k_170 : int =
                    CInt 48
                  In
                    Oadd(@k_169 : int , @k_170 : int)
              In
                App @k_167 : int -> ()(@k_168 : int)
          Else
            ()
    Else
      Let @k_173 : () =
        Let @k_182 : int -> () =
          Var @t_7_print_int_base : int -> ()
        In
          Let @k_183 : int =
            Let @k_184 : int =
              Var @t_8 : int
            In
              Let @k_185 : int =
                CInt 10
              In
                Odiv(@k_184 : int , @k_185 : int)
          In
            App @k_182 : int -> ()(@k_183 : int)
      In
        Let @k_174 : () =
          Let @k_175 : int -> () =
            Var print_char : int -> ()
          In
            Let @k_176 : int =
              Let @k_177 : int =
                Let @k_179 : int -> int -> int =
                  Var @t_4_mod_ : int -> int -> int
                In
                  Let @k_180 : int =
                    Var @t_8 : int
                  In
                    Let @k_181 : int =
                      CInt 10
                    In
                      App @k_179 : int -> int -> int(@k_180 : int , @k_181 : int)
              In
                Let @k_178 : int =
                  CInt 48
                In
                  Oadd(@k_177 : int , @k_178 : int)
            In
              App @k_175 : int -> ()(@k_176 : int)
        In
          Osemi2(@k_173 : () , @k_174 : ())
]
@cls_4 : Func (@t_7_print_int_base : int -> ())(@t_10 : int)[
Let @k_145 : int =
  Var @t_10 : int
In
  Let @k_146 : int =
    CInt 0
  In
    If @k_145 : int  =  @k_146 : int Then
      Let @k_147 : int -> () =
        Var print_char : int -> ()
      In
        Let @k_148 : int =
          CInt 48
        In
          App @k_147 : int -> ()(@k_148 : int)
    Else
      Let @k_149 : int =
        Let @k_161 : int =
          Var @t_10 : int
        In
          Let @k_162 : int =
            CInt 0
          In
            Olt(@k_161 : int , @k_162 : int)
      In
        Let @k_150 : bool =
          CBool true
        In
          If @k_149 : int  =  @k_150 : bool Then
            Let @k_151 : () =
              Let @k_157 : int -> () =
                Var print_char : int -> ()
              In
                Let @k_158 : int =
                  CInt 45
                In
                  App @k_157 : int -> ()(@k_158 : int)
            In
              Let @k_152 : () =
                Let @k_153 : int -> () =
                  Var @t_7_print_int_base : int -> ()
                In
                  Let @k_154 : int =
                    Let @k_155 : int =
                      CInt 0
                    In
                      Let @k_156 : int =
                        Var @t_10 : int
                      In
                        Osub(@k_155 : int , @k_156 : int)
                  In
                    App @k_153 : int -> ()(@k_154 : int)
              In
                Osemi2(@k_151 : () , @k_152 : ())
          Else
            Let @k_159 : int -> () =
              Var @t_7_print_int_base : int -> ()
            In
              Let @k_160 : int =
                Var @t_10 : int
              In
                App @k_159 : int -> ()(@k_160 : int)
]
@cls_6 : Func (@t_13_f : int -> int)(@t_14 : int)[
Let @t_15_n : int =
  Let @k_143 : () -> int =
    Var read_char : () -> int
  In
    Let @k_144 : () =
      ()
    In
      App @k_143 : () -> int(@k_144 : ())
In
  Let @k_125 : int =
    Let @k_135 : int =
      Let @k_137 : int =
        Let @k_141 : int =
          Var @t_15_n : int
        In
          Let @k_142 : int =
            CInt 47
          In
            Osub(@k_141 : int , @k_142 : int)
      In
        Let @k_138 : int =
          Let @k_139 : int =
            CInt 58
          In
            Let @k_140 : int =
              Var @t_15_n : int
            In
              Osub(@k_139 : int , @k_140 : int)
        In
          Omul(@k_137 : int , @k_138 : int)
    In
      Let @k_136 : int =
        CInt 0
      In
        Ogt(@k_135 : int , @k_136 : int)
  In
    Let @k_126 : bool =
      CBool true
    In
      If @k_125 : int  =  @k_126 : bool Then
        Let @k_127 : int -> int =
          Var @t_13_f : int -> int
        In
          Let @k_128 : int =
            Let @k_129 : int =
              Let @k_133 : int =
                Var @t_14 : int
              In
                Let @k_134 : int =
                  CInt 10
                In
                  Omul(@k_133 : int , @k_134 : int)
            In
              Let @k_130 : int =
                Let @k_131 : int =
                  Var @t_15_n : int
                In
                  Let @k_132 : int =
                    CInt 48
                  In
                    Osub(@k_131 : int , @k_132 : int)
              In
                Oadd(@k_129 : int , @k_130 : int)
          In
            App @k_127 : int -> int(@k_128 : int)
      Else
        Var @t_14 : int
]
@cls_5 : Func (@t_11_read_int : 'a21 -> int)(@t_12 : 'a21)[
Let @t_13_f : int -> int =
  Closure <@cls_6 : int -> int,(@t_13_f : int -> int)>
In
  Let @t_11_read_int : 'a21 -> int =
    Closure <@cls_5 : 'a21 -> int,(@t_11_read_int : 'a21 -> int)>
  In
    Let @t_9_print_int : int -> () =
      Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
    In
      Let @t_7_print_int_base : int -> () =
        Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
      In
        Let @t_4_mod_ : int -> int -> int =
          Closure <@cls_2 : int -> int -> int,()>
        In
          Let @t_1_@@main : () -> () =
            Closure <@cls_1 : () -> (),()>
          In
            Let @t_16_c : int =
              Let @k_123 : () -> int =
                Var read_char : () -> int
              In
                Let @k_124 : () =
                  ()
                In
                  App @k_123 : () -> int(@k_124 : ())
            In
              Let @k_102 : int =
                Var @t_16_c : int
              In
                Let @k_103 : int =
                  CInt 45
                In
                  If @k_102 : int  =  @k_103 : int Then
                    Let @k_104 : int =
                      Let @k_105 : int -> int =
                        Var @t_13_f : int -> int
                      In
                        Let @k_106 : int =
                          CInt 0
                        In
                          App @k_105 : int -> int(@k_106 : int)
                    In
                      Ominus(@k_104 : int)
                  Else
                    Let @k_107 : int =
                      Let @k_115 : int =
                        Let @k_117 : int =
                          Let @k_121 : int =
                            Var @t_16_c : int
                          In
                            Let @k_122 : int =
                              CInt 47
                            In
                              Osub(@k_121 : int , @k_122 : int)
                        In
                          Let @k_118 : int =
                            Let @k_119 : int =
                              CInt 58
                            In
                              Let @k_120 : int =
                                Var @t_16_c : int
                              In
                                Osub(@k_119 : int , @k_120 : int)
                          In
                            Omul(@k_117 : int , @k_118 : int)
                      In
                        Let @k_116 : int =
                          CInt 0
                        In
                          Ogt(@k_115 : int , @k_116 : int)
                    In
                      Let @k_108 : bool =
                        CBool true
                      In
                        If @k_107 : int  =  @k_108 : bool Then
                          Let @k_109 : int -> int =
                            Var @t_13_f : int -> int
                          In
                            Let @k_110 : int =
                              Let @k_111 : int =
                                Var @t_16_c : int
                              In
                                Let @k_112 : int =
                                  CInt 48
                                In
                                  Osub(@k_111 : int , @k_112 : int)
                            In
                              App @k_109 : int -> int(@k_110 : int)
                        Else
                          Let @k_113 : 'a21 -> int =
                            Var @t_11_read_int : 'a21 -> int
                          In
                            Let @k_114 : 'a21 =
                              Var @t_12 : 'a21
                            In
                              App @k_113 : 'a21 -> int(@k_114 : 'a21)
]
@cls_8 : Func (@t_19_g : float -> float -> float)(@t_20 : float , @t_21 : float)[
Let @t_22_n : int =
  Let @k_100 : () -> int =
    Var read_char : () -> int
  In
    Let @k_101 : () =
      ()
    In
      App @k_100 : () -> int(@k_101 : ())
In
  Let @k_77 : int =
    Let @k_92 : int =
      Let @k_94 : int =
        Let @k_98 : int =
          Var @t_22_n : int
        In
          Let @k_99 : int =
            CInt 47
          In
            Osub(@k_98 : int , @k_99 : int)
      In
        Let @k_95 : int =
          Let @k_96 : int =
            CInt 58
          In
            Let @k_97 : int =
              Var @t_22_n : int
            In
              Osub(@k_96 : int , @k_97 : int)
        In
          Omul(@k_94 : int , @k_95 : int)
    In
      Let @k_93 : int =
        CInt 0
      In
        Ogt(@k_92 : int , @k_93 : int)
  In
    Let @k_78 : bool =
      CBool true
    In
      If @k_77 : int  =  @k_78 : bool Then
        Let @k_79 : float -> float -> float =
          Var @t_19_g : float -> float -> float
        In
          Let @k_80 : float =
            Let @k_90 : float =
              Var @t_20 : float
            In
              Let @k_91 : float =
                CFloat 0.100000
              In
                Ofmul(@k_90 : float , @k_91 : float)
          In
            Let @k_81 : float =
              Let @k_82 : float =
                Var @t_21 : float
              In
                Let @k_83 : float =
                  Let @k_84 : float =
                    Var @t_20 : float
                  In
                    Let @k_85 : float =
                      Let @k_86 : int -> float =
                        Var float_of_int : int -> float
                      In
                        Let @k_87 : int =
                          Let @k_88 : int =
                            Var @t_22_n : int
                          In
                            Let @k_89 : int =
                              CInt 48
                            In
                              Osub(@k_88 : int , @k_89 : int)
                        In
                          App @k_86 : int -> float(@k_87 : int)
                    In
                      Ofmul(@k_84 : float , @k_85 : float)
                In
                  Ofadd(@k_82 : float , @k_83 : float)
            In
              App @k_79 : float -> float -> float(@k_80 : float , @k_81 : float)
      Else
        Var @t_21 : float
]
@cls_9 : Func (@t_23_f : float -> float , @t_19_g : float -> float -> float)(@t_24 : float)[
Let @t_25_n : int =
  Let @k_75 : () -> int =
    Var read_char : () -> int
  In
    Let @k_76 : () =
      ()
    In
      App @k_75 : () -> int(@k_76 : ())
In
  Let @k_52 : int =
    Let @k_67 : int =
      Let @k_69 : int =
        Let @k_73 : int =
          Var @t_25_n : int
        In
          Let @k_74 : int =
            CInt 47
          In
            Osub(@k_73 : int , @k_74 : int)
      In
        Let @k_70 : int =
          Let @k_71 : int =
            CInt 58
          In
            Let @k_72 : int =
              Var @t_25_n : int
            In
              Osub(@k_71 : int , @k_72 : int)
        In
          Omul(@k_69 : int , @k_70 : int)
    In
      Let @k_68 : int =
        CInt 0
      In
        Ogt(@k_67 : int , @k_68 : int)
  In
    Let @k_53 : bool =
      CBool true
    In
      If @k_52 : int  =  @k_53 : bool Then
        Let @k_54 : float -> float =
          Var @t_23_f : float -> float
        In
          Let @k_55 : float =
            Let @k_56 : float =
              Let @k_62 : float =
                Var @t_24 : float
              In
                Let @k_63 : float =
                  CFloat 10.000000
                In
                  Ofmul(@k_62 : float , @k_63 : float)
            In
              Let @k_57 : float =
                Let @k_58 : int -> float =
                  Var float_of_int : int -> float
                In
                  Let @k_59 : int =
                    Let @k_60 : int =
                      Var @t_25_n : int
                    In
                      Let @k_61 : int =
                        CInt 48
                      In
                        Osub(@k_60 : int , @k_61 : int)
                  In
                    App @k_58 : int -> float(@k_59 : int)
              In
                Ofadd(@k_56 : float , @k_57 : float)
          In
            App @k_54 : float -> float(@k_55 : float)
      Else
        Let @k_64 : float -> float -> float =
          Var @t_19_g : float -> float -> float
        In
          Let @k_65 : float =
            CFloat 0.100000
          In
            Let @k_66 : float =
              Var @t_24 : float
            In
              App @k_64 : float -> float -> float(@k_65 : float , @k_66 : float)
]
@cls_7 : Func (@t_17_read_float : 'a31 -> float)(@t_18 : 'a31)[
Let @t_19_g : float -> float -> float =
  Closure <@cls_8 : float -> float -> float,(@t_19_g : float -> float -> float)>
In
  Let @t_17_read_float : 'a31 -> float =
    Closure <@cls_7 : 'a31 -> float,(@t_17_read_float : 'a31 -> float)>
  In
    Let @t_11_read_int : 'a21 -> int =
      Closure <@cls_5 : 'a21 -> int,(@t_11_read_int : 'a21 -> int)>
    In
      Let @t_9_print_int : int -> () =
        Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
      In
        Let @t_7_print_int_base : int -> () =
          Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
        In
          Let @t_4_mod_ : int -> int -> int =
            Closure <@cls_2 : int -> int -> int,()>
          In
            Let @t_1_@@main : () -> () =
              Closure <@cls_1 : () -> (),()>
            In
              Let @t_23_f : float -> float =
                Closure <@cls_9 : float -> float,(@t_23_f : float -> float , @t_19_g : float -> float -> float)>
              In
                Let @t_19_g : float -> float -> float =
                  Closure <@cls_8 : float -> float -> float,(@t_19_g : float -> float -> float)>
                In
                  Let @t_17_read_float : 'a31 -> float =
                    Closure <@cls_7 : 'a31 -> float,(@t_17_read_float : 'a31 -> float)>
                  In
                    Let @t_11_read_int : 'a21 -> int =
                      Closure <@cls_5 : 'a21 -> int,(@t_11_read_int : 'a21 -> int)>
                    In
                      Let @t_9_print_int : int -> () =
                        Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
                      In
                        Let @t_7_print_int_base : int -> () =
                          Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
                        In
                          Let @t_4_mod_ : int -> int -> int =
                            Closure <@cls_2 : int -> int -> int,()>
                          In
                            Let @t_1_@@main : () -> () =
                              Closure <@cls_1 : () -> (),()>
                            In
                              Let @t_26_c : int =
                                Let @k_50 : () -> int =
                                  Var read_char : () -> int
                                In
                                  Let @k_51 : () =
                                    ()
                                  In
                                    App @k_50 : () -> int(@k_51 : ())
                              In
                                Let @k_26 : int =
                                  Var @t_26_c : int
                                In
                                  Let @k_27 : int =
                                    CInt 45
                                  In
                                    If @k_26 : int  =  @k_27 : int Then
                                      Let @k_28 : float =
                                        CFloat 0.000000
                                      In
                                        Let @k_29 : float =
                                          Let @k_30 : float -> float =
                                            Var @t_23_f : float -> float
                                          In
                                            Let @k_31 : float =
                                              CFloat 0.000000
                                            In
                                              App @k_30 : float -> float(@k_31 : float)
                                        In
                                          Ofsub(@k_28 : float , @k_29 : float)
                                    Else
                                      Let @k_32 : int =
                                        Let @k_42 : int =
                                          Let @k_44 : int =
                                            Let @k_48 : int =
                                              Var @t_26_c : int
                                            In
                                              Let @k_49 : int =
                                                CInt 47
                                              In
                                                Osub(@k_48 : int , @k_49 : int)
                                          In
                                            Let @k_45 : int =
                                              Let @k_46 : int =
                                                CInt 58
                                              In
                                                Let @k_47 : int =
                                                  Var @t_26_c : int
                                                In
                                                  Osub(@k_46 : int , @k_47 : int)
                                            In
                                              Omul(@k_44 : int , @k_45 : int)
                                        In
                                          Let @k_43 : int =
                                            CInt 0
                                          In
                                            Ogt(@k_42 : int , @k_43 : int)
                                      In
                                        Let @k_33 : bool =
                                          CBool true
                                        In
                                          If @k_32 : int  =  @k_33 : bool Then
                                            Let @k_34 : float -> float =
                                              Var @t_23_f : float -> float
                                            In
                                              Let @k_35 : float =
                                                Let @k_36 : int -> float =
                                                  Var float_of_int : int -> float
                                                In
                                                  Let @k_37 : int =
                                                    Let @k_38 : int =
                                                      Var @t_26_c : int
                                                    In
                                                      Let @k_39 : int =
                                                        CInt 48
                                                      In
                                                        Osub(@k_38 : int , @k_39 : int)
                                                  In
                                                    App @k_36 : int -> float(@k_37 : int)
                                              In
                                                App @k_34 : float -> float(@k_35 : float)
                                          Else
                                            Let @k_40 : 'a31 -> float =
                                              Var @t_17_read_float : 'a31 -> float
                                            In
                                              Let @k_41 : 'a31 =
                                                Var @t_18 : 'a31
                                              In
                                                App @k_40 : 'a31 -> float(@k_41 : 'a31)
]
@cls_1 : Func ()(@t_2 : ())[
Let @t_3_false : int =
  CInt 0
In
  Let @t_4_mod_ : int -> int -> int =
    Closure <@cls_2 : int -> int -> int,()>
  In
    Let @t_1_@@main : () -> () =
      Closure <@cls_1 : () -> (),()>
    In
      Let @t_7_print_int_base : int -> () =
        Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
      In
        Let @t_4_mod_ : int -> int -> int =
          Closure <@cls_2 : int -> int -> int,()>
        In
          Let @t_1_@@main : () -> () =
            Closure <@cls_1 : () -> (),()>
          In
            Let @t_9_print_int : int -> () =
              Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
            In
              Let @t_7_print_int_base : int -> () =
                Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
              In
                Let @t_4_mod_ : int -> int -> int =
                  Closure <@cls_2 : int -> int -> int,()>
                In
                  Let @t_1_@@main : () -> () =
                    Closure <@cls_1 : () -> (),()>
                  In
                    Let @t_11_read_int : 'a21 -> int =
                      Closure <@cls_5 : 'a21 -> int,(@t_11_read_int : 'a21 -> int)>
                    In
                      Let @t_9_print_int : int -> () =
                        Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
                      In
                        Let @t_7_print_int_base : int -> () =
                          Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
                        In
                          Let @t_4_mod_ : int -> int -> int =
                            Closure <@cls_2 : int -> int -> int,()>
                          In
                            Let @t_1_@@main : () -> () =
                              Closure <@cls_1 : () -> (),()>
                            In
                              Let @t_17_read_float : 'a31 -> float =
                                Closure <@cls_7 : 'a31 -> float,(@t_17_read_float : 'a31 -> float)>
                              In
                                Let @t_11_read_int : 'a21 -> int =
                                  Closure <@cls_5 : 'a21 -> int,(@t_11_read_int : 'a21 -> int)>
                                In
                                  Let @t_9_print_int : int -> () =
                                    Closure <@cls_4 : int -> (),(@t_7_print_int_base : int -> ())>
                                  In
                                    Let @t_7_print_int_base : int -> () =
                                      Closure <@cls_3 : int -> (),(@t_7_print_int_base : int -> () , @t_4_mod_ : int -> int -> int)>
                                    In
                                      Let @t_4_mod_ : int -> int -> int =
                                        Closure <@cls_2 : int -> int -> int,()>
                                      In
                                        Let @t_1_@@main : () -> () =
                                          Closure <@cls_1 : () -> (),()>
                                        In
                                          Let @k_3 : () =
                                            Let @k_24 : int -> () =
                                              Var @t_9_print_int : int -> ()
                                            In
                                              Let @k_25 : int =
                                                CInt 314
                                              In
                                                App @k_24 : int -> ()(@k_25 : int)
                                          In
                                            Let @k_4 : () =
                                              Let @k_5 : () =
                                                Let @k_22 : int -> () =
                                                  Var print_char : int -> ()
                                                In
                                                  Let @k_23 : int =
                                                    CInt 10
                                                  In
                                                    App @k_22 : int -> ()(@k_23 : int)
                                              In
                                                Let @k_6 : () =
                                                  Let @k_7 : () =
                                                    Let @k_20 : int -> () =
                                                      Var @t_9_print_int : int -> ()
                                                    In
                                                      Let @k_21 : int =
                                                        CInt 0
                                                      In
                                                        App @k_20 : int -> ()(@k_21 : int)
                                                  In
                                                    Let @k_8 : () =
                                                      Let @k_9 : () =
                                                        Let @k_18 : int -> () =
                                                          Var print_char : int -> ()
                                                        In
                                                          Let @k_19 : int =
                                                            CInt 10
                                                          In
                                                            App @k_18 : int -> ()(@k_19 : int)
                                                      In
                                                        Let @k_10 : () =
                                                          Let @k_11 : () =
                                                            Let @k_15 : int -> () =
                                                              Var @t_9_print_int : int -> ()
                                                            In
                                                              Let @k_16 : int =
                                                                Let @k_17 : int =
                                                                  CInt 1234
                                                                In
                                                                  Ominus(@k_17 : int)
                                                              In
                                                                App @k_15 : int -> ()(@k_16 : int)
                                                          In
                                                            Let @k_12 : () =
                                                              Let @k_13 : int -> () =
                                                                Var print_char : int -> ()
                                                              In
                                                                Let @k_14 : int =
                                                                  CInt 10
                                                                In
                                                                  App @k_13 : int -> ()(@k_14 : int)
                                                            In
                                                              Osemi2(@k_11 : () , @k_12 : ())
                                                        In
                                                          Osemi2(@k_9 : () , @k_10 : ())
                                                    In
                                                      Osemi2(@k_7 : () , @k_8 : ())
                                                In
                                                  Osemi2(@k_5 : () , @k_6 : ())
                                            In
                                              Osemi2(@k_3 : () , @k_4 : ())
]
Let @t_1_@@main : () -> () =
  Closure <@cls_1 : () -> (),()>
In
  Let @k_1 : () -> () =
    Var @t_1_@@main : () -> ()
  In
    Let @k_2 : () =
      ()
    In
      App @k_1 : () -> ()(@k_2 : ())

closure_converted
virtualized
On function main
@k_2 :: [ebp-4]
@k_1 :: [ebp-8]
@t_1_@@main :: [ebp-12]
@global_ret_val :: [ebp-16]

On function @cls_2
@k_189 :: [ebp-4]
@k_188 :: [ebp-8]
@k_191 :: [ebp-12]
@k_190 :: [ebp-16]
@k_193 :: [ebp-20]
@k_192 :: [ebp-24]
@ret_val_@cls_2 :: [ebp-28]
@t_6 :: [ebp+12]
@t_5 :: [ebp+8]

On function @cls_3
@k_174 :: [ebp-4]
@k_173 :: [ebp-8]
@k_176 :: [ebp-12]
@k_175 :: [ebp-16]
@k_178 :: [ebp-20]
@k_177 :: [ebp-24]
@k_181 :: [ebp-28]
@k_180 :: [ebp-32]
@k_179 :: [ebp-36]
@k_183 :: [ebp-40]
@k_182 :: [ebp-44]
@k_185 :: [ebp-48]
@k_184 :: [ebp-52]
@k_168 :: [ebp-56]
@k_167 :: [ebp-60]
@k_170 :: [ebp-64]
@k_169 :: [ebp-68]
@k_166 :: [ebp-72]
@k_165 :: [ebp-76]
@k_172 :: [ebp-80]
@k_171 :: [ebp-84]
@k_164 :: [ebp-88]
@k_163 :: [ebp-92]
@k_187 :: [ebp-96]
@k_186 :: [ebp-100]
@ret_val_@cls_3 :: [ebp-104]
@t_8 :: [ebp+8]
@t_4_mod_ :: [edi+4]
@t_7_print_int_base :: [edi+0]
On function @cls_4
@k_160 :: [ebp-4]
@k_159 :: [ebp-8]
@k_152 :: [ebp-12]
@k_151 :: [ebp-16]
@k_154 :: [ebp-20]
@k_153 :: [ebp-24]
@k_156 :: [ebp-28]
@k_155 :: [ebp-32]
@k_158 :: [ebp-36]
@k_157 :: [ebp-40]
@k_150 :: [ebp-44]
@k_149 :: [ebp-48]
@k_162 :: [ebp-52]
@k_161 :: [ebp-56]
@k_148 :: [ebp-60]
@k_147 :: [ebp-64]
@k_146 :: [ebp-68]
@k_145 :: [ebp-72]
@ret_val_@cls_4 :: [ebp-76]
@t_10 :: [ebp+8]
@t_7_print_int_base :: [edi+0]
On function @cls_6
@k_128 :: [ebp-4]
@k_127 :: [ebp-8]
@k_130 :: [ebp-12]
@k_129 :: [ebp-16]
@k_132 :: [ebp-20]
@k_131 :: [ebp-24]
@t_15_n :: [ebp-28]
@k_134 :: [ebp-32]
@k_133 :: [ebp-36]
@k_126 :: [ebp-40]
@k_125 :: [ebp-44]
@k_136 :: [ebp-48]
@k_135 :: [ebp-52]
@k_138 :: [ebp-56]
@k_137 :: [ebp-60]
@k_140 :: [ebp-64]
@k_139 :: [ebp-68]
@k_142 :: [ebp-72]
@k_141 :: [ebp-76]
@k_144 :: [ebp-80]
@k_143 :: [ebp-84]
@ret_val_@cls_6 :: [ebp-88]
@t_14 :: [ebp+8]
@t_13_f :: [edi+0]
On function @cls_5
@k_114 :: [ebp-4]
@k_113 :: [ebp-8]
@k_110 :: [ebp-12]
@k_109 :: [ebp-16]
@k_112 :: [ebp-20]
@k_111 :: [ebp-24]
@t_16_c :: [ebp-28]
@t_13_f :: [ebp-32]
@k_108 :: [ebp-36]
@k_107 :: [ebp-40]
@k_116 :: [ebp-44]
@k_115 :: [ebp-48]
@k_118 :: [ebp-52]
@k_117 :: [ebp-56]
@k_120 :: [ebp-60]
@k_119 :: [ebp-64]
@k_122 :: [ebp-68]
@k_121 :: [ebp-72]
@k_104 :: [ebp-76]
@k_106 :: [ebp-80]
@k_105 :: [ebp-84]
@k_103 :: [ebp-88]
@k_102 :: [ebp-92]
@k_124 :: [ebp-96]
@k_123 :: [ebp-100]
@t_1_@@main :: [ebp-104]
@t_4_mod_ :: [ebp-108]
@t_7_print_int_base :: [ebp-112]
@t_9_print_int :: [ebp-116]
@ret_val_@cls_5 :: [ebp-120]
@t_12 :: [ebp+8]
@t_11_read_int :: [edi+0]
On function @cls_8
@k_81 :: [ebp-4]
@k_80 :: [ebp-8]
@k_79 :: [ebp-12]
@k_83 :: [ebp-16]
@k_82 :: [ebp-20]
@k_85 :: [ebp-24]
@k_84 :: [ebp-28]
@k_87 :: [ebp-32]
@k_86 :: [ebp-36]
@k_89 :: [ebp-40]
@k_88 :: [ebp-44]
@t_22_n :: [ebp-48]
@k_91 :: [ebp-52]
@k_90 :: [ebp-56]
@k_78 :: [ebp-60]
@k_77 :: [ebp-64]
@k_93 :: [ebp-68]
@k_92 :: [ebp-72]
@k_95 :: [ebp-76]
@k_94 :: [ebp-80]
@k_97 :: [ebp-84]
@k_96 :: [ebp-88]
@k_99 :: [ebp-92]
@k_98 :: [ebp-96]
@k_101 :: [ebp-100]
@k_100 :: [ebp-104]
@ret_val_@cls_8 :: [ebp-108]
@t_21 :: [ebp+12]
@t_20 :: [ebp+8]
@t_19_g :: [edi+0]
On function @cls_9
@k_66 :: [ebp-4]
@k_65 :: [ebp-8]
@k_64 :: [ebp-12]
@k_55 :: [ebp-16]
@k_54 :: [ebp-20]
@k_57 :: [ebp-24]
@k_56 :: [ebp-28]
@k_59 :: [ebp-32]
@k_58 :: [ebp-36]
@k_61 :: [ebp-40]
@k_60 :: [ebp-44]
@t_25_n :: [ebp-48]
@k_63 :: [ebp-52]
@k_62 :: [ebp-56]
@k_53 :: [ebp-60]
@k_52 :: [ebp-64]
@k_68 :: [ebp-68]
@k_67 :: [ebp-72]
@k_70 :: [ebp-76]
@k_69 :: [ebp-80]
@k_72 :: [ebp-84]
@k_71 :: [ebp-88]
@k_74 :: [ebp-92]
@k_73 :: [ebp-96]
@k_76 :: [ebp-100]
@k_75 :: [ebp-104]
@ret_val_@cls_9 :: [ebp-108]
@t_24 :: [ebp+8]
@t_19_g :: [edi+4]
@t_23_f :: [edi+0]
On function @cls_7
@k_41 :: [ebp-4]
@k_40 :: [ebp-8]
@k_35 :: [ebp-12]
@k_34 :: [ebp-16]
@k_37 :: [ebp-20]
@k_36 :: [ebp-24]
@k_39 :: [ebp-28]
@k_38 :: [ebp-32]
@t_26_c :: [ebp-36]
@t_23_f :: [ebp-40]
@k_33 :: [ebp-44]
@k_32 :: [ebp-48]
@k_43 :: [ebp-52]
@k_42 :: [ebp-56]
@k_45 :: [ebp-60]
@k_44 :: [ebp-64]
@k_47 :: [ebp-68]
@k_46 :: [ebp-72]
@k_49 :: [ebp-76]
@k_48 :: [ebp-80]
@k_29 :: [ebp-84]
@k_28 :: [ebp-88]
@k_31 :: [ebp-92]
@k_30 :: [ebp-96]
@k_27 :: [ebp-100]
@k_26 :: [ebp-104]
@k_51 :: [ebp-108]
@k_50 :: [ebp-112]
@t_1_@@main :: [ebp-116]
@t_4_mod_ :: [ebp-120]
@t_7_print_int_base :: [ebp-124]
@t_9_print_int :: [ebp-128]
@t_11_read_int :: [ebp-132]
@t_19_g :: [ebp-136]
@ret_val_@cls_7 :: [ebp-140]
@t_18 :: [ebp+8]
@t_17_read_float :: [edi+0]
On function @cls_1
@k_4 :: [ebp-4]
@k_3 :: [ebp-8]
@k_6 :: [ebp-12]
@k_5 :: [ebp-16]
@k_8 :: [ebp-20]
@k_7 :: [ebp-24]
@k_10 :: [ebp-28]
@k_9 :: [ebp-32]
@k_12 :: [ebp-36]
@k_11 :: [ebp-40]
@k_14 :: [ebp-44]
@k_13 :: [ebp-48]
@k_16 :: [ebp-52]
@k_15 :: [ebp-56]
@k_17 :: [ebp-60]
@t_9_print_int :: [ebp-64]
@k_19 :: [ebp-68]
@k_18 :: [ebp-72]
@k_21 :: [ebp-76]
@k_20 :: [ebp-80]
@k_23 :: [ebp-84]
@k_22 :: [ebp-88]
@k_25 :: [ebp-92]
@k_24 :: [ebp-96]
@t_1_@@main :: [ebp-100]
@t_4_mod_ :: [ebp-104]
@t_7_print_int_base :: [ebp-108]
@t_11_read_int :: [ebp-112]
@t_17_read_float :: [ebp-116]
@t_3_false :: [ebp-120]
@ret_val_@cls_1 :: [ebp-124]
@t_2 :: [ebp+8]

BITS 32
%include "libio_linux.s"
%include "lib.s"
section .data
@const_1:
	dd 0.100000
@const_2:
	dd 10.000000
@const_3:
	dd 0.100000
@const_4:
	dd 0.000000
@const_5:
	dd 0.000000
section .bss
global_heap:
	resb 0x10000000
section .text
global main
@cls_2:
	push ebp
	mov ebp,esp
	sub esp,28
	mov eax,dword [ebp+8]
	mov dword [ebp-8],eax
; lib.ml@2:19;2:20 ::<= lib.ml@2:19;2:20
	mov eax,dword [ebp+8]
	mov dword [ebp-24],eax
; lib.ml@2:22;2:23 ::<= lib.ml@2:22;2:23
	mov eax,dword [ebp+12]
	mov dword [ebp-20],eax
; lib.ml@2:24;2:25 ::<= lib.ml@2:24;2:25
	mov ebx,dword [ebp-20]
	mov eax,dword [ebp-24]
	xor edx,edx
	div ebx
	mov dword [ebp-16],eax
; lib.ml@2:22;2:25 ::= Odiv lib.ml@2:22;2:23 lib.ml@2:24;2:25
	mov eax,dword [ebp+12]
	mov dword [ebp-12],eax
; lib.ml@2:27;2:28 ::<= lib.ml@2:27;2:28
	mov ebx,dword [ebp-12]
	mov eax,dword [ebp-16]
	mul ebx
	mov dword [ebp-4],eax
; lib.ml@2:21;2:28 ::= Omul lib.ml@2:22;2:25 lib.ml@2:27;2:28
	mov ebx,dword [ebp-4]
	mov eax,dword [ebp-8]
	sub eax,ebx
	mov dword [ebp-28],eax
; lib.ml@2:19;2:28 ::= Osub lib.ml@2:19;2:20 lib.ml@2:21;2:28
	mov eax,dword [ebp-28]
	add esp,28
	pop ebp
	ret
@cls_3:
	push ebp
	mov ebp,esp
	sub esp,104
	mov eax,dword [ebp+8]
	mov dword [ebp-100],eax
; lib.ml@4:4;4:5 ::<= lib.ml@4:4;4:5
	mov dword [ebp-96],10
; lib.ml@4:8;4:10
	mov ebx,dword [ebp-96]
	mov eax,dword [ebp-100]
	xor ecx,ecx
	cmp eax,ebx
	setl cl
	mov eax,ecx
	mov dword [ebp-92],eax
; lib.ml@4:4;4:10 ::= Olt lib.ml@4:4;4:5 lib.ml@4:8;4:10
	mov dword [ebp-88],1
; lib.ml@4:4;4:10
	mov eax,dword [ebp-92]
	mov ebx,dword [ebp-88]
	cmp eax,ebx
	jne @label_19
	mov dword [ebp-84],0
; lib.ml@4:20;4:21
	mov eax,dword [ebp+8]
	mov dword [ebp-80],eax
; lib.ml@4:24;4:25 ::<= lib.ml@4:24;4:25
	mov ebx,dword [ebp-80]
	mov eax,dword [ebp-84]
	xor ecx,ecx
	cmp eax,ebx
	setl cl
	mov eax,ecx
	mov dword [ebp-76],eax
; lib.ml@4:20;4:25 ::= Olt lib.ml@4:20;4:21 lib.ml@4:24;4:25
	mov dword [ebp-72],1
; lib.ml@4:20;4:25
	mov eax,dword [ebp-76]
	mov ebx,dword [ebp-72]
	cmp eax,ebx
	jne @label_21
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-60],esi
	add esi,8
; lib.ml@4:31;4:41 lib.ml@4:31;4:41
	mov eax,dword [ebp+8]
	mov dword [ebp-68],eax
; lib.ml@4:43;4:44 ::<= lib.ml@4:43;4:44
	mov dword [ebp-64],48
; lib.ml@4:45;4:47
	mov ebx,dword [ebp-64]
	mov eax,dword [ebp-68]
	add eax,ebx
	mov dword [ebp-56],eax
; lib.ml@4:43;4:47 ::= Oadd lib.ml@4:43;4:44 lib.ml@4:45;4:47
	push edi
	push dword dword [ebp-56]
	mov eax,dword [ebp-60]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-104],eax
	add esp,4
	pop edi
; lib.ml@4:1;6:30 lib.ml@4:31;4:41
	jmp @label_22
@label_21:
	mov dword [ebp-104],esi
	add esi,0
; lib.ml@4:1;6:30
@label_22:
	jmp @label_20
@label_19:
	mov eax,dword [edi+0]
	mov dword [ebp-44],eax
; lib.ml@5:3;5:17 ::<= lib.ml@5:3;5:17
	mov eax,dword [ebp+8]
	mov dword [ebp-52],eax
; lib.ml@5:19;5:20 ::<= lib.ml@5:19;5:20
	mov dword [ebp-48],10
; lib.ml@5:21;5:23
	mov ebx,dword [ebp-48]
	mov eax,dword [ebp-52]
	xor edx,edx
	div ebx
	mov dword [ebp-40],eax
; lib.ml@5:19;5:23 ::= Odiv lib.ml@5:19;5:20 lib.ml@5:21;5:23
	push edi
	push dword dword [ebp-40]
	mov eax,dword [ebp-44]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-8],eax
	add esp,4
	pop edi
; lib.ml@5:3;5:24 lib.ml@5:3;5:17
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-16],esi
	add esi,8
; lib.ml@6:2;6:12 lib.ml@6:2;6:12
	mov eax,dword [edi+4]
	mov dword [ebp-36],eax
; lib.ml@6:15;6:19 ::<= lib.ml@6:15;6:19
	mov eax,dword [ebp+8]
	mov dword [ebp-32],eax
; lib.ml@6:20;6:21 ::<= lib.ml@6:20;6:21
	mov dword [ebp-28],10
; lib.ml@6:22;6:24
	push edi
	push dword dword [ebp-28]
	push dword dword [ebp-32]
	mov eax,dword [ebp-36]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-24],eax
	add esp,8
	pop edi
; lib.ml@6:15;6:24 lib.ml@6:15;6:19
	mov dword [ebp-20],48
; lib.ml@6:26;6:28
	mov ebx,dword [ebp-20]
	mov eax,dword [ebp-24]
	add eax,ebx
	mov dword [ebp-12],eax
; lib.ml@6:14;6:28 ::= Oadd lib.ml@6:15;6:24 lib.ml@6:26;6:28
	push edi
	push dword dword [ebp-12]
	mov eax,dword [ebp-16]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-4],eax
	add esp,4
	pop edi
; lib.ml@6:2;6:29 lib.ml@6:2;6:12
	mov eax,dword [ebp-4]
	mov dword [ebp-104],eax
; lib.ml@4:1;6:30 ::<= lib.ml@6:2;6:29
@label_20:
	mov eax,dword [ebp-104]
	add esp,104
	pop ebp
	ret
@cls_4:
	push ebp
	mov ebp,esp
	sub esp,76
	mov eax,dword [ebp+8]
	mov dword [ebp-72],eax
; lib.ml@9:4;9:5 ::<= lib.ml@9:4;9:5
	mov dword [ebp-68],0
; lib.ml@9:8;9:9
	mov eax,dword [ebp-72]
	mov ebx,dword [ebp-68]
	cmp eax,ebx
	jne @label_15
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-64],esi
	add esi,8
; lib.ml@9:15;9:25 lib.ml@9:15;9:25
	mov dword [ebp-60],48
; lib.ml@9:26;9:28
	push edi
	push dword dword [ebp-60]
	mov eax,dword [ebp-64]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-76],eax
	add esp,4
	pop edi
; lib.ml@9:1;10:79 lib.ml@9:15;9:25
	jmp @label_16
@label_15:
	mov eax,dword [ebp+8]
	mov dword [ebp-56],eax
; lib.ml@10:10;10:11 ::<= lib.ml@10:10;10:11
	mov dword [ebp-52],0
; lib.ml@10:14;10:15
	mov ebx,dword [ebp-52]
	mov eax,dword [ebp-56]
	xor ecx,ecx
	cmp eax,ebx
	setl cl
	mov eax,ecx
	mov dword [ebp-48],eax
; lib.ml@10:10;10:15 ::= Olt lib.ml@10:10;10:11 lib.ml@10:14;10:15
	mov dword [ebp-44],1
; lib.ml@10:10;10:15
	mov eax,dword [ebp-48]
	mov ebx,dword [ebp-44]
	cmp eax,ebx
	jne @label_17
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-40],esi
	add esi,8
; lib.ml@10:21;10:31 lib.ml@10:21;10:31
	mov dword [ebp-36],45
; lib.ml@10:32;10:34
	push edi
	push dword dword [ebp-36]
	mov eax,dword [ebp-40]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-16],eax
	add esp,4
	pop edi
; lib.ml@10:21;10:34 lib.ml@10:21;10:31
	mov eax,dword [edi+0]
	mov dword [ebp-24],eax
; lib.ml@10:36;10:50 ::<= lib.ml@10:36;10:50
	mov dword [ebp-32],0
; lib.ml@10:52;10:53
	mov eax,dword [ebp+8]
	mov dword [ebp-28],eax
; lib.ml@10:54;10:55 ::<= lib.ml@10:54;10:55
	mov ebx,dword [ebp-28]
	mov eax,dword [ebp-32]
	sub eax,ebx
	mov dword [ebp-20],eax
; lib.ml@10:52;10:55 ::= Osub lib.ml@10:52;10:53 lib.ml@10:54;10:55
	push edi
	push dword dword [ebp-20]
	mov eax,dword [ebp-24]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-12],eax
	add esp,4
	pop edi
; lib.ml@10:36;10:56 lib.ml@10:36;10:50
	mov eax,dword [ebp-12]
	mov dword [ebp-76],eax
; lib.ml@9:1;10:79 ::<= lib.ml@10:36;10:56
	jmp @label_18
@label_17:
	mov eax,dword [edi+0]
	mov dword [ebp-8],eax
; lib.ml@10:62;10:76 ::<= lib.ml@10:62;10:76
	mov eax,dword [ebp+8]
	mov dword [ebp-4],eax
; lib.ml@10:77;10:78 ::<= lib.ml@10:77;10:78
	push edi
	push dword dword [ebp-4]
	mov eax,dword [ebp-8]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-76],eax
	add esp,4
	pop edi
; lib.ml@9:1;10:79 lib.ml@10:62;10:76
@label_18:
@label_16:
	mov eax,dword [ebp-76]
	add esp,76
	pop ebp
	ret
@cls_6:
	push ebp
	mov ebp,esp
	sub esp,88
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],read_char
	mov dword [ebp-84],esi
	add esi,8
; lib.ml@16:10;16:19 lib.ml@16:10;16:19
	mov dword [ebp-80],esi
	add esi,0
; lib.ml@16:20;16:22
	push edi
	push dword dword [ebp-80]
	mov eax,dword [ebp-84]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-28],eax
	add esp,4
	pop edi
; lib.ml@16:10;16:22 lib.ml@16:10;16:19
	mov eax,dword [ebp-28]
	mov dword [ebp-76],eax
; lib.ml@17:7;17:8 ::<= lib.ml@17:7;17:8
	mov dword [ebp-72],47
; lib.ml@17:9;17:11
	mov ebx,dword [ebp-72]
	mov eax,dword [ebp-76]
	sub eax,ebx
	mov dword [ebp-60],eax
; lib.ml@17:7;17:11 ::= Osub lib.ml@17:7;17:8 lib.ml@17:9;17:11
	mov dword [ebp-68],58
; lib.ml@17:14;17:16
	mov eax,dword [ebp-28]
	mov dword [ebp-64],eax
; lib.ml@17:17;17:18 ::<= lib.ml@17:17;17:18
	mov ebx,dword [ebp-64]
	mov eax,dword [ebp-68]
	sub eax,ebx
	mov dword [ebp-56],eax
; lib.ml@17:14;17:18 ::= Osub lib.ml@17:14;17:16 lib.ml@17:17;17:18
	mov ebx,dword [ebp-56]
	mov eax,dword [ebp-60]
	mul ebx
	mov dword [ebp-52],eax
; lib.ml@17:6;17:19 ::= Omul lib.ml@17:7;17:11 lib.ml@17:14;17:18
	mov dword [ebp-48],0
; lib.ml@17:20;17:21
	mov ebx,dword [ebp-48]
	mov eax,dword [ebp-52]
	xor ecx,ecx
	cmp eax,ebx
	setg cl
	mov eax,ecx
	mov dword [ebp-44],eax
; lib.ml@17:6;17:21 ::= Ogt lib.ml@17:6;17:19 lib.ml@17:20;17:21
	mov dword [ebp-40],1
; lib.ml@17:6;17:21
	mov eax,dword [ebp-44]
	mov ebx,dword [ebp-40]
	cmp eax,ebx
	jne @label_13
	mov eax,dword [edi+0]
	mov dword [ebp-8],eax
; lib.ml@17:27;17:28 ::<= lib.ml@17:27;17:28
	mov eax,dword [ebp+8]
	mov dword [ebp-36],eax
; lib.ml@17:30;17:33 ::<= lib.ml@17:30;17:33
	mov dword [ebp-32],10
; lib.ml@17:34;17:36
	mov ebx,dword [ebp-32]
	mov eax,dword [ebp-36]
	mul ebx
	mov dword [ebp-16],eax
; lib.ml@17:30;17:36 ::= Omul lib.ml@17:30;17:33 lib.ml@17:34;17:36
	mov eax,dword [ebp-28]
	mov dword [ebp-24],eax
; lib.ml@17:38;17:39 ::<= lib.ml@17:38;17:39
	mov dword [ebp-20],48
; lib.ml@17:40;17:42
	mov ebx,dword [ebp-20]
	mov eax,dword [ebp-24]
	sub eax,ebx
	mov dword [ebp-12],eax
; lib.ml@17:38;17:42 ::= Osub lib.ml@17:38;17:39 lib.ml@17:40;17:42
	mov ebx,dword [ebp-12]
	mov eax,dword [ebp-16]
	add eax,ebx
	mov dword [ebp-4],eax
; lib.ml@17:30;17:43 ::= Oadd lib.ml@17:30;17:36 lib.ml@17:38;17:42
	push edi
	push dword dword [ebp-4]
	mov eax,dword [ebp-8]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-88],eax
	add esp,4
	pop edi
; lib.ml@16:2;17:53 lib.ml@17:27;17:28
	jmp @label_14
@label_13:
	mov eax,dword [ebp+8]
	mov dword [ebp-88],eax
; lib.ml@16:2;17:53 ::<= lib.ml@17:50;17:53
@label_14:
	mov eax,dword [ebp-88]
	add esp,88
	pop ebp
	ret
@cls_5:
	push ebp
	mov ebp,esp
	sub esp,120
	mov edx,esi
	mov eax,dword [ebp-32]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_6
	mov dword [ebp-32],esi
	add esi,8
; lib.ml@16:2;17:53 lib.ml@16:2;17:53
	mov edx,esi
	mov eax,dword [edi+0]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_5
	mov dword [edi+0],esi
	add esi,8
; lib.ml@15:1;21:53 lib.ml@15:1;21:53
	mov edx,esi
	mov eax,dword [ebp-112]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-116],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-112]
	mov dword [esi+0],eax
	mov eax,dword [ebp-108]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-112],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-108],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],read_char
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@19:10;19:19 lib.ml@19:10;19:19
	mov dword [ebp-96],esi
	add esi,0
; lib.ml@19:20;19:22
	push edi
	push dword dword [ebp-96]
	mov eax,dword [ebp-100]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-28],eax
	add esp,4
	pop edi
; lib.ml@19:10;19:22 lib.ml@19:10;19:19
	mov eax,dword [ebp-28]
	mov dword [ebp-92],eax
; lib.ml@20:6;20:7 ::<= lib.ml@20:6;20:7
	mov dword [ebp-88],45
; lib.ml@20:10;20:12
	mov eax,dword [ebp-92]
	mov ebx,dword [ebp-88]
	cmp eax,ebx
	jne @label_9
	mov eax,dword [ebp-32]
	mov dword [ebp-84],eax
; lib.ml@20:20;20:21 ::<= lib.ml@20:20;20:21
	mov dword [ebp-80],0
; lib.ml@20:22;20:23
	push edi
	push dword dword [ebp-80]
	mov eax,dword [ebp-84]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-76],eax
	add esp,4
	pop edi
; lib.ml@20:20;20:23 lib.ml@20:20;20:21
	mov eax,dword [ebp-76]
	neg eax
	mov dword [ebp-120],eax
; lib.ml@15:1;21:53 ::= Ominus lib.ml@20:20;20:23
	jmp @label_10
@label_9:
	mov eax,dword [ebp-28]
	mov dword [ebp-72],eax
; lib.ml@21:8;21:9 ::<= lib.ml@21:8;21:9
	mov dword [ebp-68],47
; lib.ml@21:10;21:12
	mov ebx,dword [ebp-68]
	mov eax,dword [ebp-72]
	sub eax,ebx
	mov dword [ebp-56],eax
; lib.ml@21:8;21:12 ::= Osub lib.ml@21:8;21:9 lib.ml@21:10;21:12
	mov dword [ebp-64],58
; lib.ml@21:15;21:17
	mov eax,dword [ebp-28]
	mov dword [ebp-60],eax
; lib.ml@21:18;21:19 ::<= lib.ml@21:18;21:19
	mov ebx,dword [ebp-60]
	mov eax,dword [ebp-64]
	sub eax,ebx
	mov dword [ebp-52],eax
; lib.ml@21:15;21:19 ::= Osub lib.ml@21:15;21:17 lib.ml@21:18;21:19
	mov ebx,dword [ebp-52]
	mov eax,dword [ebp-56]
	mul ebx
	mov dword [ebp-48],eax
; lib.ml@21:7;21:20 ::= Omul lib.ml@21:8;21:12 lib.ml@21:15;21:19
	mov dword [ebp-44],0
; lib.ml@21:21;21:22
	mov ebx,dword [ebp-44]
	mov eax,dword [ebp-48]
	xor ecx,ecx
	cmp eax,ebx
	setg cl
	mov eax,ecx
	mov dword [ebp-40],eax
; lib.ml@21:7;21:22 ::= Ogt lib.ml@21:7;21:20 lib.ml@21:21;21:22
	mov dword [ebp-36],1
; lib.ml@21:7;21:22
	mov eax,dword [ebp-40]
	mov ebx,dword [ebp-36]
	cmp eax,ebx
	jne @label_11
	mov eax,dword [ebp-32]
	mov dword [ebp-16],eax
; lib.ml@21:28;21:29 ::<= lib.ml@21:28;21:29
	mov eax,dword [ebp-28]
	mov dword [ebp-24],eax
; lib.ml@21:31;21:32 ::<= lib.ml@21:31;21:32
	mov dword [ebp-20],48
; lib.ml@21:33;21:35
	mov ebx,dword [ebp-20]
	mov eax,dword [ebp-24]
	sub eax,ebx
	mov dword [ebp-12],eax
; lib.ml@21:31;21:35 ::= Osub lib.ml@21:31;21:32 lib.ml@21:33;21:35
	push edi
	push dword dword [ebp-12]
	mov eax,dword [ebp-16]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-120],eax
	add esp,4
	pop edi
; lib.ml@15:1;21:53 lib.ml@21:28;21:29
	jmp @label_12
@label_11:
	mov eax,dword [edi+0]
	mov dword [ebp-8],eax
; lib.ml@21:42;21:50 ::<= lib.ml@21:42;21:50
	mov eax,dword [ebp+8]
	mov dword [ebp-4],eax
; lib.ml@21:51;21:52 ::<= lib.ml@21:51;21:52
	push edi
	push dword dword [ebp-4]
	mov eax,dword [ebp-8]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-120],eax
	add esp,4
	pop edi
; lib.ml@15:1;21:53 lib.ml@21:42;21:50
@label_12:
@label_10:
	mov eax,dword [ebp-120]
	add esp,120
	pop ebp
	ret
@cls_8:
	push ebp
	mov ebp,esp
	sub esp,108
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],read_char
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@25:10;25:19 lib.ml@25:10;25:19
	mov dword [ebp-100],esi
	add esi,0
; lib.ml@25:20;25:22
	push edi
	push dword dword [ebp-100]
	mov eax,dword [ebp-104]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-48],eax
	add esp,4
	pop edi
; lib.ml@25:10;25:22 lib.ml@25:10;25:19
	mov eax,dword [ebp-48]
	mov dword [ebp-96],eax
; lib.ml@26:7;26:8 ::<= lib.ml@26:7;26:8
	mov dword [ebp-92],47
; lib.ml@26:9;26:11
	mov ebx,dword [ebp-92]
	mov eax,dword [ebp-96]
	sub eax,ebx
	mov dword [ebp-80],eax
; lib.ml@26:7;26:11 ::= Osub lib.ml@26:7;26:8 lib.ml@26:9;26:11
	mov dword [ebp-88],58
; lib.ml@26:14;26:16
	mov eax,dword [ebp-48]
	mov dword [ebp-84],eax
; lib.ml@26:17;26:18 ::<= lib.ml@26:17;26:18
	mov ebx,dword [ebp-84]
	mov eax,dword [ebp-88]
	sub eax,ebx
	mov dword [ebp-76],eax
; lib.ml@26:14;26:18 ::= Osub lib.ml@26:14;26:16 lib.ml@26:17;26:18
	mov ebx,dword [ebp-76]
	mov eax,dword [ebp-80]
	mul ebx
	mov dword [ebp-72],eax
; lib.ml@26:6;26:19 ::= Omul lib.ml@26:7;26:11 lib.ml@26:14;26:18
	mov dword [ebp-68],0
; lib.ml@26:20;26:21
	mov ebx,dword [ebp-68]
	mov eax,dword [ebp-72]
	xor ecx,ecx
	cmp eax,ebx
	setg cl
	mov eax,ecx
	mov dword [ebp-64],eax
; lib.ml@26:6;26:21 ::= Ogt lib.ml@26:6;26:19 lib.ml@26:20;26:21
	mov dword [ebp-60],1
; lib.ml@26:6;26:21
	mov eax,dword [ebp-64]
	mov ebx,dword [ebp-60]
	cmp eax,ebx
	jne @label_7
	mov eax,dword [edi+0]
	mov dword [ebp-12],eax
; lib.ml@26:27;26:28 ::<= lib.ml@26:27;26:28
	mov eax,dword [ebp+8]
	mov dword [ebp-56],eax
; lib.ml@26:30;26:31 ::<= lib.ml@26:30;26:31
	mov eax,[@const_1]
	mov dword [ebp-52],eax
	fld dword [ebp-56]
	fld dword [ebp-52]
	fmulp
	fstp dword [ebp-8]
; lib.ml@26:30;26:38 ::= Ofmul lib.ml@26:30;26:31 lib.ml@26:35;26:38
	mov eax,dword [ebp+12]
	mov dword [ebp-20],eax
; lib.ml@26:41;26:44 ::<= lib.ml@26:41;26:44
	mov eax,dword [ebp+8]
	mov dword [ebp-28],eax
; lib.ml@26:46;26:47 ::<= lib.ml@26:46;26:47
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],float_of_int
	mov dword [ebp-36],esi
	add esi,8
; lib.ml@26:50;26:62 lib.ml@26:50;26:62
	mov eax,dword [ebp-48]
	mov dword [ebp-44],eax
; lib.ml@26:64;26:65 ::<= lib.ml@26:64;26:65
	mov dword [ebp-40],48
; lib.ml@26:66;26:68
	mov ebx,dword [ebp-40]
	mov eax,dword [ebp-44]
	sub eax,ebx
	mov dword [ebp-32],eax
; lib.ml@26:64;26:68 ::= Osub lib.ml@26:64;26:65 lib.ml@26:66;26:68
	push edi
	push dword dword [ebp-32]
	mov eax,dword [ebp-36]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-24],eax
	add esp,4
	pop edi
; lib.ml@26:50;26:69 lib.ml@26:50;26:62
	fld dword [ebp-28]
	fld dword [ebp-24]
	fmulp
	fstp dword [ebp-16]
; lib.ml@26:46;26:70 ::= Ofmul lib.ml@26:46;26:47 lib.ml@26:50;26:69
	fld dword [ebp-20]
	fld dword [ebp-16]
	faddp
	fstp dword [ebp-4]
; lib.ml@26:41;26:70 ::= Ofadd lib.ml@26:41;26:44 lib.ml@26:46;26:70
	push edi
	push dword dword [ebp-4]
	push dword dword [ebp-8]
	mov eax,dword [ebp-12]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-108],eax
	add esp,8
	pop edi
; lib.ml@25:2;26:80 lib.ml@26:27;26:28
	jmp @label_8
@label_7:
	mov eax,dword [ebp+12]
	mov dword [ebp-108],eax
; lib.ml@25:2;26:80 ::<= lib.ml@26:77;26:80
@label_8:
	mov eax,dword [ebp-108]
	add esp,108
	pop ebp
	ret
@cls_9:
	push ebp
	mov ebp,esp
	sub esp,108
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],read_char
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@29:10;29:19 lib.ml@29:10;29:19
	mov dword [ebp-100],esi
	add esi,0
; lib.ml@29:20;29:22
	push edi
	push dword dword [ebp-100]
	mov eax,dword [ebp-104]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-48],eax
	add esp,4
	pop edi
; lib.ml@29:10;29:22 lib.ml@29:10;29:19
	mov eax,dword [ebp-48]
	mov dword [ebp-96],eax
; lib.ml@30:7;30:8 ::<= lib.ml@30:7;30:8
	mov dword [ebp-92],47
; lib.ml@30:9;30:11
	mov ebx,dword [ebp-92]
	mov eax,dword [ebp-96]
	sub eax,ebx
	mov dword [ebp-80],eax
; lib.ml@30:7;30:11 ::= Osub lib.ml@30:7;30:8 lib.ml@30:9;30:11
	mov dword [ebp-88],58
; lib.ml@30:14;30:16
	mov eax,dword [ebp-48]
	mov dword [ebp-84],eax
; lib.ml@30:17;30:18 ::<= lib.ml@30:17;30:18
	mov ebx,dword [ebp-84]
	mov eax,dword [ebp-88]
	sub eax,ebx
	mov dword [ebp-76],eax
; lib.ml@30:14;30:18 ::= Osub lib.ml@30:14;30:16 lib.ml@30:17;30:18
	mov ebx,dword [ebp-76]
	mov eax,dword [ebp-80]
	mul ebx
	mov dword [ebp-72],eax
; lib.ml@30:6;30:19 ::= Omul lib.ml@30:7;30:11 lib.ml@30:14;30:18
	mov dword [ebp-68],0
; lib.ml@30:20;30:21
	mov ebx,dword [ebp-68]
	mov eax,dword [ebp-72]
	xor ecx,ecx
	cmp eax,ebx
	setg cl
	mov eax,ecx
	mov dword [ebp-64],eax
; lib.ml@30:6;30:21 ::= Ogt lib.ml@30:6;30:19 lib.ml@30:20;30:21
	mov dword [ebp-60],1
; lib.ml@30:6;30:21
	mov eax,dword [ebp-64]
	mov ebx,dword [ebp-60]
	cmp eax,ebx
	jne @label_5
	mov eax,dword [edi+0]
	mov dword [ebp-20],eax
; lib.ml@30:27;30:28 ::<= lib.ml@30:27;30:28
	mov eax,dword [ebp+8]
	mov dword [ebp-56],eax
; lib.ml@30:30;30:33 ::<= lib.ml@30:30;30:33
	mov eax,[@const_2]
	mov dword [ebp-52],eax
	fld dword [ebp-56]
	fld dword [ebp-52]
	fmulp
	fstp dword [ebp-28]
; lib.ml@30:30;30:39 ::= Ofmul lib.ml@30:30;30:33 lib.ml@30:35;30:39
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],float_of_int
	mov dword [ebp-36],esi
	add esi,8
; lib.ml@30:42;30:54 lib.ml@30:42;30:54
	mov eax,dword [ebp-48]
	mov dword [ebp-44],eax
; lib.ml@30:56;30:57 ::<= lib.ml@30:56;30:57
	mov dword [ebp-40],48
; lib.ml@30:58;30:60
	mov ebx,dword [ebp-40]
	mov eax,dword [ebp-44]
	sub eax,ebx
	mov dword [ebp-32],eax
; lib.ml@30:56;30:60 ::= Osub lib.ml@30:56;30:57 lib.ml@30:58;30:60
	push edi
	push dword dword [ebp-32]
	mov eax,dword [ebp-36]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-24],eax
	add esp,4
	pop edi
; lib.ml@30:42;30:61 lib.ml@30:42;30:54
	fld dword [ebp-28]
	fld dword [ebp-24]
	faddp
	fstp dword [ebp-16]
; lib.ml@30:30;30:62 ::= Ofadd lib.ml@30:30;30:39 lib.ml@30:42;30:61
	push edi
	push dword dword [ebp-16]
	mov eax,dword [ebp-20]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-108],eax
	add esp,4
	pop edi
; lib.ml@29:2;30:78 lib.ml@30:27;30:28
	jmp @label_6
@label_5:
	mov eax,dword [edi+4]
	mov dword [ebp-12],eax
; lib.ml@30:69;30:70 ::<= lib.ml@30:69;30:70
	mov eax,[@const_3]
	mov dword [ebp-8],eax
	mov eax,dword [ebp+8]
	mov dword [ebp-4],eax
; lib.ml@30:75;30:78 ::<= lib.ml@30:75;30:78
	push edi
	push dword dword [ebp-4]
	push dword dword [ebp-8]
	mov eax,dword [ebp-12]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-108],eax
	add esp,8
	pop edi
; lib.ml@29:2;30:78 lib.ml@30:69;30:70
@label_6:
	mov eax,dword [ebp-108]
	add esp,108
	pop ebp
	ret
@cls_7:
	push ebp
	mov ebp,esp
	sub esp,140
	mov edx,esi
	mov eax,dword [ebp-136]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_8
	mov dword [ebp-136],esi
	add esi,8
; lib.ml@25:2;26:80 lib.ml@25:2;26:80
	mov edx,esi
	mov eax,dword [edi+0]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_7
	mov dword [edi+0],esi
	add esi,8
; lib.ml@24:1;34:70 lib.ml@24:1;34:70
	mov edx,esi
	mov eax,dword [ebp-132]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_5
	mov dword [ebp-132],esi
	add esi,8
; lib.ml@15:1;21:53 lib.ml@15:1;21:53
	mov edx,esi
	mov eax,dword [ebp-124]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-128],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-124]
	mov dword [esi+0],eax
	mov eax,dword [ebp-120]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-124],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-120],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-116],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	mov eax,dword [ebp-40]
	mov dword [esi+0],eax
	mov eax,dword [ebp-136]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_9
	mov dword [ebp-40],esi
	add esi,8
; lib.ml@29:2;30:78 lib.ml@29:2;30:78
	mov edx,esi
	mov eax,dword [ebp-136]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_8
	mov dword [ebp-136],esi
	add esi,8
; lib.ml@25:2;26:80 lib.ml@25:2;26:80
	mov edx,esi
	mov eax,dword [edi+0]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_7
	mov dword [edi+0],esi
	add esi,8
; lib.ml@24:1;34:70 lib.ml@24:1;34:70
	mov edx,esi
	mov eax,dword [ebp-132]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_5
	mov dword [ebp-132],esi
	add esi,8
; lib.ml@15:1;21:53 lib.ml@15:1;21:53
	mov edx,esi
	mov eax,dword [ebp-124]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-128],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-124]
	mov dword [esi+0],eax
	mov eax,dword [ebp-120]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-124],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-120],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-116],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],read_char
	mov dword [ebp-112],esi
	add esi,8
; lib.ml@32:10;32:19 lib.ml@32:10;32:19
	mov dword [ebp-108],esi
	add esi,0
; lib.ml@32:20;32:22
	push edi
	push dword dword [ebp-108]
	mov eax,dword [ebp-112]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-36],eax
	add esp,4
	pop edi
; lib.ml@32:10;32:22 lib.ml@32:10;32:19
	mov eax,dword [ebp-36]
	mov dword [ebp-104],eax
; lib.ml@33:6;33:7 ::<= lib.ml@33:6;33:7
	mov dword [ebp-100],45
; lib.ml@33:10;33:12
	mov eax,dword [ebp-104]
	mov ebx,dword [ebp-100]
	cmp eax,ebx
	jne @label_1
	mov eax,[@const_4]
	mov dword [ebp-88],eax
	mov eax,dword [ebp-40]
	mov dword [ebp-96],eax
; lib.ml@33:26;33:27 ::<= lib.ml@33:26;33:27
	mov eax,[@const_5]
	mov dword [ebp-92],eax
	push edi
	push dword dword [ebp-92]
	mov eax,dword [ebp-96]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-84],eax
	add esp,4
	pop edi
; lib.ml@33:26;33:31 lib.ml@33:26;33:27
	fld dword [ebp-88]
	fld dword [ebp-84]
	fsubp
	fstp dword [ebp-140]
; lib.ml@24:1;34:70 ::= Ofsub lib.ml@33:19;33:22 lib.ml@33:26;33:31
	jmp @label_2
@label_1:
	mov eax,dword [ebp-36]
	mov dword [ebp-80],eax
; lib.ml@34:8;34:9 ::<= lib.ml@34:8;34:9
	mov dword [ebp-76],47
; lib.ml@34:10;34:12
	mov ebx,dword [ebp-76]
	mov eax,dword [ebp-80]
	sub eax,ebx
	mov dword [ebp-64],eax
; lib.ml@34:8;34:12 ::= Osub lib.ml@34:8;34:9 lib.ml@34:10;34:12
	mov dword [ebp-72],58
; lib.ml@34:15;34:17
	mov eax,dword [ebp-36]
	mov dword [ebp-68],eax
; lib.ml@34:18;34:19 ::<= lib.ml@34:18;34:19
	mov ebx,dword [ebp-68]
	mov eax,dword [ebp-72]
	sub eax,ebx
	mov dword [ebp-60],eax
; lib.ml@34:15;34:19 ::= Osub lib.ml@34:15;34:17 lib.ml@34:18;34:19
	mov ebx,dword [ebp-60]
	mov eax,dword [ebp-64]
	mul ebx
	mov dword [ebp-56],eax
; lib.ml@34:7;34:20 ::= Omul lib.ml@34:8;34:12 lib.ml@34:15;34:19
	mov dword [ebp-52],0
; lib.ml@34:21;34:22
	mov ebx,dword [ebp-52]
	mov eax,dword [ebp-56]
	xor ecx,ecx
	cmp eax,ebx
	setg cl
	mov eax,ecx
	mov dword [ebp-48],eax
; lib.ml@34:7;34:22 ::= Ogt lib.ml@34:7;34:20 lib.ml@34:21;34:22
	mov dword [ebp-44],1
; lib.ml@34:7;34:22
	mov eax,dword [ebp-48]
	mov ebx,dword [ebp-44]
	cmp eax,ebx
	jne @label_3
	mov eax,dword [ebp-40]
	mov dword [ebp-16],eax
; lib.ml@34:28;34:29 ::<= lib.ml@34:28;34:29
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],float_of_int
	mov dword [ebp-24],esi
	add esi,8
; lib.ml@34:31;34:43 lib.ml@34:31;34:43
	mov eax,dword [ebp-36]
	mov dword [ebp-32],eax
; lib.ml@34:45;34:46 ::<= lib.ml@34:45;34:46
	mov dword [ebp-28],48
; lib.ml@34:47;34:49
	mov ebx,dword [ebp-28]
	mov eax,dword [ebp-32]
	sub eax,ebx
	mov dword [ebp-20],eax
; lib.ml@34:45;34:49 ::= Osub lib.ml@34:45;34:46 lib.ml@34:47;34:49
	push edi
	push dword dword [ebp-20]
	mov eax,dword [ebp-24]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-12],eax
	add esp,4
	pop edi
; lib.ml@34:31;34:50 lib.ml@34:31;34:43
	push edi
	push dword dword [ebp-12]
	mov eax,dword [ebp-16]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-140],eax
	add esp,4
	pop edi
; lib.ml@24:1;34:70 lib.ml@34:28;34:29
	jmp @label_4
@label_3:
	mov eax,dword [edi+0]
	mov dword [ebp-8],eax
; lib.ml@34:57;34:67 ::<= lib.ml@34:57;34:67
	mov eax,dword [ebp+8]
	mov dword [ebp-4],eax
; lib.ml@34:68;34:69 ::<= lib.ml@34:68;34:69
	push edi
	push dword dword [ebp-4]
	mov eax,dword [ebp-8]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-140],eax
	add esp,4
	pop edi
; lib.ml@24:1;34:70 lib.ml@34:57;34:67
@label_4:
@label_2:
	mov eax,dword [ebp-140]
	add esp,140
	pop ebp
	ret
@cls_1:
	push ebp
	mov ebp,esp
	sub esp,124
	mov dword [ebp-120],0
; lib.ml@1:12;1:13
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	mov eax,dword [ebp-104]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-108],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-64],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	mov eax,dword [ebp-104]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-108],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	mov eax,dword [ebp-112]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_5
	mov dword [ebp-112],esi
	add esi,8
; lib.ml@15:1;21:53 lib.ml@15:1;21:53
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-64],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	mov eax,dword [ebp-104]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-108],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov edx,esi
	mov eax,dword [ebp-116]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_7
	mov dword [ebp-116],esi
	add esi,8
; lib.ml@24:1;34:70 lib.ml@24:1;34:70
	mov edx,esi
	mov eax,dword [ebp-112]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_5
	mov dword [ebp-112],esi
	add esi,8
; lib.ml@15:1;21:53 lib.ml@15:1;21:53
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	add esi,4
	mov dword [esi+4],edx
	mov dword [esi],@cls_4
	mov dword [ebp-64],esi
	add esi,8
; lib.ml@9:1;10:79 lib.ml@9:1;10:79
	mov edx,esi
	mov eax,dword [ebp-108]
	mov dword [esi+0],eax
	mov eax,dword [ebp-104]
	mov dword [esi+4],eax
	add esi,8
	mov dword [esi+4],edx
	mov dword [esi],@cls_3
	mov dword [ebp-108],esi
	add esi,8
; lib.ml@4:1;6:30 lib.ml@4:1;6:30
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_2
	mov dword [ebp-104],esi
	add esi,8
; lib.ml@2:19;2:28 lib.ml@2:19;2:28
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-100],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov eax,dword [ebp-64]
	mov dword [ebp-96],eax
; print_int.ml@1:0;1:9 ::<= print_int.ml@1:0;1:9
	mov dword [ebp-92],314
; print_int.ml@1:10;1:13
	push edi
	push dword dword [ebp-92]
	mov eax,dword [ebp-96]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-8],eax
	add esp,4
	pop edi
; print_int.ml@1:0;1:13 print_int.ml@1:0;1:9
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-88],esi
	add esi,8
; print_int.ml@2:0;2:10 print_int.ml@2:0;2:10
	mov dword [ebp-84],10
; print_int.ml@2:11;2:13
	push edi
	push dword dword [ebp-84]
	mov eax,dword [ebp-88]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-16],eax
	add esp,4
	pop edi
; print_int.ml@2:0;2:13 print_int.ml@2:0;2:10
	mov eax,dword [ebp-64]
	mov dword [ebp-80],eax
; print_int.ml@3:0;3:9 ::<= print_int.ml@3:0;3:9
	mov dword [ebp-76],0
; print_int.ml@3:10;3:11
	push edi
	push dword dword [ebp-76]
	mov eax,dword [ebp-80]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-24],eax
	add esp,4
	pop edi
; print_int.ml@3:0;3:11 print_int.ml@3:0;3:9
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-72],esi
	add esi,8
; print_int.ml@4:0;4:10 print_int.ml@4:0;4:10
	mov dword [ebp-68],10
; print_int.ml@4:11;4:13
	push edi
	push dword dword [ebp-68]
	mov eax,dword [ebp-72]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-32],eax
	add esp,4
	pop edi
; print_int.ml@4:0;4:13 print_int.ml@4:0;4:10
	mov eax,dword [ebp-64]
	mov dword [ebp-56],eax
; print_int.ml@5:0;5:9 ::<= print_int.ml@5:0;5:9
	mov dword [ebp-60],1234
; print_int.ml@5:12;5:16
	mov eax,dword [ebp-60]
	neg eax
	mov dword [ebp-52],eax
; print_int.ml@5:11;5:16 ::= Ominus print_int.ml@5:12;5:16
	push edi
	push dword dword [ebp-52]
	mov eax,dword [ebp-56]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-40],eax
	add esp,4
	pop edi
; print_int.ml@5:0;5:17 print_int.ml@5:0;5:9
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],print_char
	mov dword [ebp-48],esi
	add esi,8
; print_int.ml@6:0;6:10 print_int.ml@6:0;6:10
	mov dword [ebp-44],10
; print_int.ml@6:11;6:13
	push edi
	push dword dword [ebp-44]
	mov eax,dword [ebp-48]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-36],eax
	add esp,4
	pop edi
; print_int.ml@6:0;6:13 print_int.ml@6:0;6:10
	mov eax,dword [ebp-36]
	mov dword [ebp-28],eax
; print_int.ml@5:0;6:13 ::<= print_int.ml@6:0;6:13
	mov eax,dword [ebp-28]
	mov dword [ebp-20],eax
; print_int.ml@4:0;6:13 ::<= print_int.ml@5:0;6:13
	mov eax,dword [ebp-20]
	mov dword [ebp-12],eax
; print_int.ml@3:0;6:13 ::<= print_int.ml@4:0;6:13
	mov eax,dword [ebp-12]
	mov dword [ebp-4],eax
; print_int.ml@2:0;6:13 ::<= print_int.ml@3:0;6:13
	mov eax,dword [ebp-4]
	mov dword [ebp-124],eax
; lib.ml@1:0;39:0 ::<= print_int.ml@2:0;6:13
	mov eax,dword [ebp-124]
	add esp,124
	pop ebp
	ret
main:
	push ebp
	mov ebp,esp
	sub esp,16
	mov esi,global_heap
	mov edx,esi
	add esi,0
	mov dword [esi+4],edx
	mov dword [esi],@cls_1
	mov dword [ebp-12],esi
	add esi,8
; lib.ml@1:0;39:0 lib.ml@1:0;39:0
	mov eax,dword [ebp-12]
	mov dword [ebp-8],eax
; @0:-1;0:-1 ::<= @0:-1;0:-1
	mov dword [ebp-4],esi
	add esi,0
; @0:-1;0:-1
	push edi
	push dword dword [ebp-4]
	mov eax,dword [ebp-8]
	mov edi,[eax+4]
	call [eax]
	mov dword [ebp-16],eax
	add esp,4
	pop edi
; @0:-1;0:-1 @0:-1;0:-1
	mov eax,0
	add esp,16
	pop ebp
	ret
